% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.R
\name{fit_base.mcgf}
\alias{fit_base.mcgf}
\title{Parameter estimation for symmetric correlation functions.}
\usage{
\method{fit_base}{mcgf}(
  x,
  lag,
  horizon = 1,
  model = c("spatial", "temporal", "sep", "fs"),
  method = c("wls", "mle"),
  optim_fn = c("nlminb", "optim", "other"),
  par_fixed,
  par_init,
  lower,
  upper,
  other_optim_fn,
  ...
)
}
\arguments{
\item{x}{An \code{mcgf} object containing attributes \code{dists}, \code{acfs}, \code{ccfs}, and
\code{sds}.}

\item{lag}{Integer time lag.}

\item{horizon}{Integer forecast horizon.}

\item{model}{Base model, one of \code{spatial}, \code{temporal}, \code{sep}, \code{fs}. Only
\code{sep} and \code{fs} are supported when \code{method = mle}}

\item{method}{Parameter estimation methods, weighted least square (\code{wls}) or
maximum likelihood estimation (\code{mle}).}

\item{optim_fn}{Optimization functions, one of \code{nlminb}, \code{optim}, \code{other}.
When \code{optim_fn = other}, supply \code{other_optim_fn}.}

\item{par_fixed}{Fixed parameters.}

\item{par_init}{Initial values for parameters to be optimized.}

\item{lower}{Optional; lower bound of parameters.}

\item{upper}{Optional: upper bound of parameters.}

\item{other_optim_fn}{Optional, other optimization functions. The first two
arguments must be initial values for the parameters and a function to be
minimized respectively (same as that of \code{optim} and \code{nlminb}).}

\item{...}{Additional arguments passed to \code{optim_fn}.}
}
\value{
A list outputted from optimization functions of \code{optim_fn}.
}
\description{
Parameter estimation for symmetric correlation functions.
}
\details{
Additional details...
}
\examples{
wind_sq <- sqrt(wind[, -1])
time <- wind[, 1]
wind_mcgf <- mcgf(data = wind_sq, locations = wind_loc, time = time)
wind_mcgf <- add_acfs(x = wind_mcgf, lag_max = 3)
wind_mcgf <- add_ccfs(x = wind_mcgf, lag_max = 3)
fit_base(wind_mcgf, lag = 3, model = "spatial", optim_fn = "nlminb",
         par_init = list(nugget = 0.01, c = 0.001), par_fixed = list(gamma = 0.5))
fit_base(wind_mcgf, lag = 3, model = "spatial", optim_fn = "optim",
         par_init = list(nugget = 0.01, c = 0.001), par_fixed = list(gamma = 0.5))
fit_base(wind_mcgf, lag = 3, model = "temporal", optim_fn = "optim",
         par_init = list(a = 1, alpha = 0.8))
fit_base(wind_mcgf, lag = 3, model = "temporal", optim_fn = "nlminb",
         par_init = list(a = 1, alpha = 0.8))
fit_base(wind_mcgf, lag = 3, model = "sep", optim_fn = "nlminb",
         par_init = list(a = 1, alpha = 1, nugget = 0.02, c = 0.001),
         par_fixed = list(gamma = 0.5))
fit_base(wind_mcgf, lag = 3, model = "fs", optim_fn = "nlminb",
         par_init = list(beta = 0),
         par_fixed = list(a = 0.972, alpha = 0.834, nugget = 0.0415,
         c = 0.00128, gamma = 0.5))
fit_base(wind_mcgf, lag = 3, model = "fs", optim_fn = "nlminb",
         par_init = list(beta = 0),
         par_fixed = list(a = 0.747841458 , alpha = 0.747762836,
         nugget = 0.064880862 , c = 0.001016796 , gamma = 0.5))
}
